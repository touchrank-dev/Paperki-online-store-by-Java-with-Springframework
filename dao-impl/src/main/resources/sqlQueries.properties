user.getByLoginPassword =   SELECT * FROM users \
                            WHERE login_user = :p_user_login AND password = :p_user_password;

user.getByLogin =       SELECT * FROM users \
                        WHERE login_user = :p_user_login;

user.getById =          SELECT * FROM users \
                        WHERE id_user = :p_user_id;

user.getByUNP =         SELECT u.* FROM users AS u \
                        JOIN enterprise AS e USING(id_user) \
                        WHERE e.unp = :p_enterprise_unp;

user.add =              INSERT INTO users (name_user, login_user, email, subscribe, password, phone) \
                        VALUES (:p_user_name, :p_user_login, :p_user_email, :p_user_subscribe, :p_user_password, :p_user_phone);

user.update =           UPDATE users \
                        SET name_user = :p_user_name, \
                            email = :p_user_email, \
                            phone = :p_user_phone, \
                            birth_day = :p_birth_day \
                        WHERE id_user = :p_user_id;

user.update.password =  UPDATE users SET password = :p_user_password WHERE id_user = :p_user_id;

enterprise.add =        INSERT INTO enterprise (id_user, unp, name) \
                        VALUES (:p_user_id, :p_enterprise_unp, :p_enterprise_name );

enterprise.getByUNP =   SELECT * FROM enterprise WHERE unp = :p_enterprise_unp;

enterprise.getByUserId =    SELECT  e.*, \
                                    pa.id_payment_account, \
                                    pa.bank_name, \
                                    pa.bank_code, \
                                    pa.account_number, \
                                    pa.is_primary \
                            FROM enterprise AS e \
                            JOIN payment_accounts AS pa USING(id_enterprise) \
                            WHERE e.id_user = :p_user_id;

payment.account.add =   INSERT INTO payment_accounts (id_enterprise, bank_name, bank_code, account_number) \
                        VALUES (:p_id_enterprise, :p_bank_name, :p_bank_code, :p_account_number);

# =================================================================================================

catalog.getAll =        SELECT  c.*, \
                                cf.parent_id_catalog AS parent \
                        FROM catalog AS c \
                        JOIN catalog_ref AS cf ON cf.id_catalog = c.id_catalog \
                        ORDER BY parent, c.order_catalog;

catalog.getAllChild =   SELECT  c.id_catalog, \
                                c.pap_id, \
                                c.translit_name \
                        FROM catalog AS c \
                        JOIN catalog_ref AS cf ON cf.id_catalog = c.id_catalog \
                        WHERE cf.parent_id_catalog > 0 \
                        ORDER BY c.pap_id;

catalog.getAllByStock = SELECT DISTINCT \
                                c.*, \
                                cf.parent_id_catalog AS parent \
                        FROM stock AS s \
                        JOIN product_catalog AS pc using(id_product) \
                        JOIN catalog AS c using(id_catalog) \
                        JOIN catalog_ref AS cf ON cf.id_catalog = c.id_catalog \
                        ORDER BY parent, c.order_catalog;

catalog.getByTName =    SELECT c.*, \
                               cf.parent_id_catalog AS parent \
                        FROM catalog AS c \
                        JOIN catalog_ref AS cf ON cf.id_catalog = c.id_catalog \
                        WHERE c.translit_name = :p_category_t_name;

catalog.batch.add =     INSERT INTO catalog (pap_id, name, translit_name, link, order_catalog) \
                        VALUES (:papId, :name, :translitName, :link, :order);

catalog.batch.addRef =  INSERT INTO catalog_ref (id_catalog, parent_id_catalog) \
                        VALUES (:id, :parent);

catalog.batch.update =  UPDATE catalog \
                        SET name = :name, \
                            translit_name = :translitName, \
                            link = :link, \
                            metadesk = :metadesk, \
                            metakey = :metakey, \
                            customtitle = :customtitle, \
                            order_catalog = :order \
                        WHERE id_catalog = :id;

catalog.batch.updateRef = UPDATE catalog_ref \
                          SET parent_id_catalog = :parent \
                          WHERE id_catalog = :id;

# =================================================================================================
product.getAll =        SELECT  p.*, \
                                pc.id_catalog, \
                                c.pap_id AS catpapid, \
                                c.translit_name AS cattransname \
                        FROM products AS p \
                        JOIN product_catalog AS pc USING(id_product) \
                        JOIN catalog AS c USING(id_catalog);

product.unpublish =     UPDATE products SET is_published = 0, is_visible = 0;

product.clearStock =    DELETE FROM stock WHERE id_stock_place = :p_id;

product.batch.addStockItem =    INSERT INTO stock(id_stock_place, id_product, quantity_available) \
                                VALUES (:isStock, :id, :quantityAvailable);

product.getProductsByCategoryTName =    SELECT  p.*, \
                                                c.translit_name AS cat_translit_name, \
                                                pp.quantity_start, \
                                                pp.value, \
                                                pd.short_description, \
                                                pd.full_description, \
                                                b.name AS bname, \
                                                b.translit_name AS btname, \
                                                s.quantity_available, \
                                                d.value_double, d.value_int, dt.type AS dtype \
                                        FROM products AS p \
                                        LEFT JOIN brands AS b USING(id_brand) \
                                        LEFT JOIN product_prices AS pp USING(pnt) \
                                        LEFT JOIN product_description AS pd USING(id_product) \
                                        LEFT JOIN product_catalog AS pc USING(id_product) \
                                        LEFT JOIN catalog AS c USING(id_catalog) \
                                        LEFT JOIN stock AS s USING(id_product) \
                                        LEFT JOIN discounts AS d USING(id_product) \
                                        LEFT JOIN discount_types AS dt USING(id_discount_type) \
                                        WHERE c.translit_name = :p_category_t_name \
                                        ORDER BY pc.order_product, pp.quantity_start;

product.getProductByTName =     SELECT  p.*, \
                                        c.translit_name AS cat_translit_name, \
                                        pp.quantity_start, \
                                        pp.value, \
                                        pd.short_description, \
                                        pd.full_description, \
                                        b.name AS bname, \
                                        b.translit_name AS btname, \
                                        s.quantity_available, \
                                        d.value_double, d.value_int, dt.type AS dtype \
                                FROM products AS p \
                                LEFT JOIN brands AS b USING(id_brand) \
                                LEFT JOIN product_prices AS pp USING(pnt) \
                                LEFT JOIN product_description AS pd USING(id_product) \
                                LEFT JOIN product_catalog AS pc USING(id_product) \
                                LEFT JOIN catalog AS c USING(id_catalog) \
                                LEFT JOIN stock AS s USING(id_product) \
                                LEFT JOIN discounts AS d USING(id_product) \
                                LEFT JOIN discount_types AS dt USING(id_discount_type) \
                                WHERE p.translit_name = :p_product_t_name \
                                ORDER BY pp.quantity_start;

product.getByPNT=       SELECT  p.*, \
                                c.translit_name AS cat_translit_name, \
                                pp.quantity_start, \
                                pp.value, \
                                pd.short_description, \
                                pd.full_description, \
                                b.name AS bname, \
                                b.translit_name AS btname, \
                                s.quantity_available, \
                                d.value_double, d.value_int, dt.type AS dtype \
                        FROM products AS p \
                        LEFT JOIN brands AS b USING(id_brand) \
                        LEFT JOIN product_prices AS pp USING(pnt) \
                        LEFT JOIN product_description AS pd USING(id_product) \
                        LEFT JOIN product_catalog AS pc USING(id_product) \
                        LEFT JOIN catalog AS c USING(id_catalog) \
                        LEFT JOIN stock AS s USING(id_product) \
                        LEFT JOIN discounts AS d USING(id_product) \
                        LEFT JOIN discount_types AS dt USING(id_discount_type) \
                        WHERE p.pnt = :p_pnt \
                        ORDER BY pp.quantity_start;

product.getAvailableProductByPNT=   SELECT  p.id_product, \
                                            p.pnt, \
                                            pp.quantity_start, \
                                            pp.value, \
                                            p.base_price, \
                                            p.vat, \
                                            p.full_name, \
                                            p.short_name, \
                                            p.link, \
                                            s.quantity_available, \
                                            d.value_double, d.value_int, dt.type AS dtype \
                                    FROM stock AS s \
                                    LEFT JOIN products AS p USING(id_product) \
                                    LEFT JOIN product_prices AS pp USING(pnt) \
                                    LEFT JOIN discounts AS d USING(id_product) \
                                    LEFT JOIN discount_types AS dt USING(id_discount_type) \
                                    WHERE p.pnt = :p_pnt \
                                    ORDER BY pp.quantity_start;

product.extraTypes.getAll =     SELECT  p.*, \
                                        c.translit_name AS cat_translit_name, \
                                        pp.quantity_start, \
                                        pp.value, \
                                        pd.short_description, \
                                        pd.full_description, \
                                        b.name AS bname, \
                                        b.translit_name AS btname, \
                                        s.quantity_available, \
                                        d.value_double, d.value_int, dt.type AS dtype \
                                FROM products AS p \
                                LEFT JOIN brands AS b USING(id_brand) \
                                LEFT JOIN product_prices AS pp USING(pnt) \
                                LEFT JOIN product_description AS pd USING(id_product) \
                                LEFT JOIN product_catalog AS pc USING(id_product) \
                                LEFT JOIN catalog AS c USING(id_catalog) \
                                LEFT JOIN stock AS s USING(id_product) \
                                LEFT JOIN discounts AS d USING(id_product) \
                                LEFT JOIN discount_types AS dt USING(id_discount_type) \
                                WHERE p.extra_type IS NOT NULL \
                                ORDER BY p.extra_type, pp.quantity_start;

product.attributes.getByPNT =     SELECT  id_product_attributes, \
                                                name, \
                                                value, \
                                                order_attr \
                                        FROM product_attributes \
                                        WHERE pnt = :p_pnt \
                                        ORDER BY order_attr;

product.attributes.deleteAll =      DELETE FROM product_attributes;

product.attributes.batch.add =      INSERT INTO product_attributes (pnt, name, value, order_attr) \
                                    VALUES (:pnt, :name, :value, :order);

product.add =           INSERT INTO products (  pnt, \
                                                personal_group_name, \
                                                full_name, \
                                                short_name, \
                                                translit_name, \
                                                link, \
                                                id_brand, \
                                                country_from, \
                                                country_made, \
                                                bar_code, \
                                                measure, \
                                                available_day, \
                                                base_price, \
                                                vat) \
                        VALUES (:p_pnt, \
                                :p_personal_group_name, \
                                :p_full_name, \
                                :p_short_name, \
                                :p_product_t_name, \
                                :p_link, \
                                :p_id_brand, \
                                :p_country_from, \
                                :p_country_made, \
                                :p_bar_code, \
                                :p_measure, \
                                :p_available_day, \
                                :p_base_price, \
                                :p_vat);

product.addCatRef =     INSERT INTO product_catalog (id_product, id_catalog, order_product) \
                        VALUES (:p_id, :p_id_catalog, :p_order);

product.batch.update =          UPDATE products \
                                SET     personal_group_name = :personalGroupName, \
                                        full_name = :fullName, \
                                        short_name = :shortName, \
                                        translit_name = :translitName, \
                                        link = :link, \
                                        id_brand = :brandId, \
                                        country_from = :countryFrom, \
                                        country_made = :countryMade, \
                                        bar_code = :barCode, \
                                        measure = :measure, \
                                        available_day = :availableDay, \
                                        base_price = :basePrice, \
                                        vat = :VAT \
                                WHERE pnt = :pnt;

product.batch.updateCAtRef =    UPDATE product_catalog \
                                SET id_catalog = :categoryId, order_product = :order \
                                WHERE id_product = :id;

product.prices.deleteAll =      DELETE FROM product_prices;

product.prices.add =            INSERT INTO product_prices (pnt, quantity_start, value) \
                                VALUES (:pnt, :quantityStart, :basePrice);

# =================================================================================================
brand.getAll =          SELECT * FROM brands;

brand.batch.add =       INSERT INTO brands (pap_id, name, translit_name, icon, short_description, full_description) \
                        VALUES (:papId, :name, :tName, :icon, :shortDescription, :fullDescription);
# =================================================================================================


feedback.getAll =       SELECT * FROM feedbacks ORDER BY create_date DESC;


feedback.getAllApprove = SELECT * FROM feedbacks WHERE approve = 1 ORDER BY create_date DESC;

feedback.add =          INSERT INTO feedbacks (id_user, user_name, email, ip_address, text) \
                        VALUES (:p_id_user, :p_user_name, :p_email, :p_ip_address, :p_text);

feedback.product.getAll =

feedback.product.add =

# =================================================================================================

menu.getAll =           SELECT m.id_menu, mi.* \
                        FROM menu AS m \
                        JOIN menu_item_ref AS mir ON mir.id_menu = m.id_menu \
                        LEFT JOIN menu_items AS mi ON mi.id_menu_item = mir.id_menu_item \
                        WHERE m.translit_name = :p_translit_name_menu \
                        ORDER BY mi.order_item;

menu.getByTName =       SELECT m.id_menu, mi.* \
                        FROM menu AS m \
                        JOIN menu_item_ref AS mir ON mir.id_menu = m.id_menu \
                        LEFT JOIN menu_items AS mi ON mi.id_menu_item = mir.id_menu_item \
                        WHERE m.translit_name = :p_translit_name_menu AND mi.translit_name = :p_translit_name \
                        ORDER BY mi.order_item;

# =================================================================================================

subscribe.add =         INSERT INTO subscribes (id_mail_list, email) \
                        VALUES (:p_id_mail_list, :p_email);

# =================================================================================================

callback.add =          INSERT INTO callbacks (name, phone, comment) \
                        VALUES (:p_name, :p_phone, :p_comment);

# =================================================================================================

delivery.getAll =       SELECT  d.*, \
                                dot.id_order_type,  \
                                dot.min_cart_total, \
                                dot.price \
                        FROM delivery AS d \
                        JOIN delivery_order_type AS dot USING(id_delivery);

delivery.getById =       SELECT * FROM delivery WHERE id_delivery = :p_id;
                        
# =================================================================================================

payment.getAll =        SELECT  p.*, \
                                pot.id_order_type, \
                                pot.min_cart_total, \
                                pot.price \
                        FROM payment AS p \
                        JOIN payment_order_type AS pot USING(id_payment);

payment.getById =       SELECT * FROM payment WHERE id_payment = :p_id;

payment.getByOrderTypeId =              SELECT  p.*, \
                                                pot.id_order_type,  \
                                                pot.min_cart_total, \
                                                pot.price \
                                        FROM payment AS p \
                                        JOIN payment_order_type AS pot USING(id_payment) \
                                        WHERE pot.id_order_type = :p_id_order_type;

# =================================================================================================

order.getByToken =      SELECT * \
                        FROM orders AS o \
                        LEFT JOIN order_attributes AS oa USING(id_order) \
                        WHERE o.token_order = :p_token_order;

order.getByUseId =      SELECT * \
                        FROM orders AS o \
                        LEFT JOIN order_status AS os USING(id_order_status) \
                        LEFT JOIN order_attributes AS oa USING(id_order) \
                        WHERE o.id_user = :p_id_user;

order.getAttributes =   SELECT * FROM order_attributes WHERE id_order = :p_id_order;

order.getItems =        SELECT * FROM order_items WHERE id_order = :p_id_order;

order.add =             INSERT INTO orders (id_order_type, \
                                            token_order, \
                                            order_number, \
                                            id_user, \
                                            total, \
                                            total_with_vat, \
                                            vat_total, \
                                            total_discount, \
                                            final_total, \
                                            final_total_with_vat) \
                        VALUES (:p_id_order_type, \
                                :p_token_order, \
                                :p_order_number, \
                                :p_id_user, \
                                :p_total, \
                                :p_total_with_vat, \
                                :p_vat_total, \
                                :p_total_discount, \
                                :p_final_total, \
                                :p_final_total_with_vat);

order.addInfo =         INSERT INTO order_info (id_order, \
                                                customer_name, \
                                                enterprise_name, \
                                                unp, \
                                                email, \
                                                phone, \
                                                payment_name, \
                                                payment_account, \
                                                payment_bank_name, \
                                                payment_bank_code, \
                                                shipment_name, \
                                                shipment_address, \
                                                user_notes) \
                        VALUES (:p_id, \
                                :p_customer_name, \
                                :p_enterprise_name, \
                                :p_unp, \
                                :p_email, \
                                :p_phone, \
                                :p_payment_name, \
                                :p_payment_account, \
                                :p_payment_bank_name, \
                                :p_payment_bank_code, \
                                :p_shipment_name, \
                                :p_shipment_address, \
                                :p_user_notes);

order.addAttribute =    INSERT INTO order_attributes (id_order, name, value) \
                        VALUES (:p_id_order, :p_name, :p_value);

order.addItem =         INSERT INTO order_items (   id_order, \
                                                    id_product, \
                                                    pnt, \
                                                    product_full_name, \
                                                    VAT, \
                                                    quantity, \
                                                    base_price, \
                                                    base_price_with_vat, \
                                                    discount_amount, \
                                                    final_price, \
                                                    final_price_with_vat, \
                                                    total, \
                                                    total_with_vat, \
                                                    total_discount, \
                                                    total_vat) \
                        VALUES (    :idOrder, \
                                    :id, \
                                    :pnt, \
                                    :fullName, \
                                    :VAT, \
                                    :quantity, \
                                    :currentPrice, \
                                    :currentPriceWithVAT, \
                                    :discountAmount, \
                                    :finalPrice, \
                                    :finalPriceWithVAT, \
                                    :total, \
                                    :totalWithVAT, \
                                    :totalDiscount, \
                                    :totalVAT);